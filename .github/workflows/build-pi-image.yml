name: Build Raspberry Pi Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Configure pi-gen
      run: |
        # Create config file with our desired settings
        echo "IMG_NAME=PiCaptivePortal-$(date +%Y-%m-%d)" > config
        echo "RELEASE=bullseye" >> config
        echo "TARGET_HOSTNAME=picaptive" >> config
        echo "FIRST_USER_NAME=pi" >> config
        echo "FIRST_USER_PASS=raspberry" >> config
        echo "LOCALE_DEFAULT=en_US.UTF-8" >> config
        echo "KEYBOARD_KEYMAP=us" >> config
        echo "KEYBOARD_LAYOUT=\"English (US)\"" >> config
        echo "TIMEZONE_DEFAULT=America/New_York" >> config
        echo "ENABLE_SSH=1" >> config
        echo "STAGE_LIST=\"stage0 stage1 stage2 export-image\"" >> config
        echo "DEPLOY_COMPRESSION=zip" >> config
        
        # Configure stages to build (only up to stage2 for captive portal)
        touch ./stage3/SKIP
        touch ./stage4/SKIP
        touch ./stage5/SKIP
        
        # Show the final config
        echo "\nPi-Gen configuration:"
        cat config
        
        # Verify our captive portal stage is in place
        echo "\nCaptive Portal stage content:"
        ls -la stage2/01-captive-portal

    - name: Setup QEMU
      run: |
        # Enable QEMU for cross-arch emulation
        docker run --rm --privileged multiarch/qemu-user-static:latest --reset -p yes
      
    - name: Build Docker image for pi-gen
      run: |
        # Build the Docker image to use for building pi-gen
        docker build -t pi-gen-builder .
    
    - name: Build Raspberry Pi image
      run: |
        echo "Starting Raspberry Pi image build process using Docker..."
        
        # Create output directory with appropriate permissions
        mkdir -p deploy
        chmod 777 deploy
        
        # Run the pi-gen build process inside Docker container
        docker run --rm --privileged \
          -v $(pwd):/pi-gen \
          -v $(pwd)/deploy:/pi-gen/deploy \
          -e CONTINUE=1 \
          -e IMG_NAME="PiCaptivePortal-$(date +%Y-%m-%d)" \
          pi-gen-builder
      
    - name: List build output
      run: |
        echo "Contents of deploy directory:"
        ls -la deploy/
        
    - name: Check deploy directory contents
      run: |
        cd deploy
        echo "Listing all files in deploy directory:"
        find . -type f -ls
        
        # If no image files were created, create a report file
        if ! ls *.img* *.zip 2>/dev/null; then
          echo "Warning: No image files found. Creating status report..."
          echo "Build completed at $(date)" > pi-gen-build-result.txt
          echo "Image generation failed. Check the build logs for errors." >> pi-gen-build-result.txt
        fi
        
    - name: Upload image artifacts
      uses: actions/upload-artifact@v4
      with:
        name: raspberry-pi-image
        path: |
          deploy/*.img.xz
          deploy/*.zip
          deploy/*.txt
        retention-days: 7
        if-no-files-found: warn
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: pi-image-${{ github.run_number }}
        name: Raspberry Pi Image Build ${{ github.run_number }}
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: false
        files: |
          deploy/*.img.xz
          deploy/*.zip
