name: Build Raspberry Pi Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    # Use ubuntu-22.04 which has better support for QEMU and binfmt
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Configure pi-gen
      run: |
        # Create config file with our desired settings
        echo "IMG_NAME=PiCaptivePortal-$(date +%Y-%m-%d)" > config
        echo "RELEASE=bullseye" >> config
        echo "TARGET_HOSTNAME=picaptive" >> config
        echo "FIRST_USER_NAME=pi" >> config
        echo "FIRST_USER_PASS=raspberry" >> config
        echo "LOCALE_DEFAULT=en_US.UTF-8" >> config
        echo "KEYBOARD_KEYMAP=us" >> config
        echo "KEYBOARD_LAYOUT=\"English (US)\"" >> config
        echo "TIMEZONE_DEFAULT=America/New_York" >> config
        echo "ENABLE_SSH=1" >> config
        echo "STAGE_LIST=\"stage0 stage1 stage2 export-image\"" >> config
        echo "DEPLOY_COMPRESSION=zip" >> config
        
        # Configure stages to build (only up to stage2 for captive portal)
        touch ./stage3/SKIP
        touch ./stage4/SKIP
        touch ./stage5/SKIP
        
        # Show the final config
        echo "\nPi-Gen configuration:"
        cat config
        
        # Verify our captive portal stage is in place
        echo "\nCaptive Portal stage content:"
        ls -la stage2/01-captive-portal

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Setup QEMU and ARM emulation support
      run: |
        # Install and set up qemu for arm emulation
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support
        
        # Use Docker's own mechanism for setting up binfmt
        docker run --privileged --rm tonistiigi/binfmt:latest --install arm64,arm
        
        # Verify the installation
        ls -la /proc/sys/fs/binfmt_misc/
        
        # Test that ARM emulation works by running a simple ARM container
        docker run --rm arm32v7/alpine uname -a
        
        # Fix Git security settings
        git config --global --add safe.directory '*'
      
    - name: Build Docker image for pi-gen
      run: |
        # Build the Docker image with BuildKit for better cross-platform support
        DOCKER_BUILDKIT=1 docker build -t pi-gen-builder .
    
    - name: Build Raspberry Pi image
      run: |
        echo "Starting Raspberry Pi image build process using Docker..."
        
        # Setup proper directory permissions
        mkdir -p deploy work
        chmod -R 777 deploy work
        
        # Show what we're working with
        echo "Directory structure before build:"
        find . -maxdepth 2 -type d | sort
        
        # Create a custom build script to handle the process properly
        cat > build_wrapper.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Stop the build on error but continue with cleanup
        trap 'echo "Error detected, performing cleanup before exit"' ERR
        
        cd /pi-gen
        
        # Setup git configuration
        git config --global --add safe.directory /pi-gen
        
        # Make sure binfmt_misc is properly configured inside the container
        echo "Checking binfmt_misc status in container:"
        ls -la /proc/sys/fs/binfmt_misc/
        grep -l arm /proc/sys/fs/binfmt_misc/* || echo "Warning: ARM binary format handlers not found"
        
        # Run the actual build script
        echo "Starting pi-gen build process..."
        ./build.sh 2>&1 | tee /pi-gen/deploy/build.log
        build_exit_code=${PIPESTATUS[0]}
        
        # Force unmount any potential stuck mounts
        echo "Cleaning up any stuck mounts..."
        for mnt in $(mount | grep /pi-gen | awk '{print $3}' | sort -r); do
          echo "Unmounting $mnt"
          umount -f $mnt 2>/dev/null || true
        done
        
        # Copy *all* potential output files to the deploy directory
        echo "Searching for image files to save as artifacts..."
        mkdir -p /pi-gen/deploy/images
        find /pi-gen/work -type f -name "*.img" -o -name "*.img.xz" -o -name "*.zip" | xargs -I{} cp -v {} /pi-gen/deploy/images/ || echo "No image files found"
        
        # Create a manifest of all work directory files over 5MB
        find /pi-gen/work -type f -size +5M | sort > /pi-gen/deploy/large_files.txt
        
        # Return the build script's exit code
        exit $build_exit_code
        EOF
        
        chmod +x build_wrapper.sh
        
        # Configure build settings
        echo "VERBOSE=1" >> config
        echo "DEBUG=1" >> config
        echo "CONTINUE=1" >> config  # Don't stop on errors
        echo "USE_QEMU=1" >> config
        
        # Run the build in a privileged container with our wrapper script
        # Explicitly map binfmt_misc and ensure ARM emulation is properly set up
        docker run --rm --privileged \
          -v $(pwd):/pi-gen:rw \
          -v $(pwd)/deploy:/pi-gen/deploy:rw \
          -v $(pwd)/work:/pi-gen/work:rw \
          -v $(pwd)/build_wrapper.sh:/build_wrapper.sh:ro \
          -v /proc/sys/fs/binfmt_misc:/proc/sys/fs/binfmt_misc:ro \
          -e IMG_NAME="PiCaptivePortal-$(date +%Y-%m-%d)" \
          -e VERBOSE=1 \
          -e DEBUG=1 \
          -e CONTINUE=1 \
          pi-gen-builder \
          /build_wrapper.sh || echo "Build process encountered errors, but attempting to collect any generated artifacts"
      
    - name: List build output
      run: |
        echo "Contents of deploy directory:"
        ls -la deploy/
        
    - name: Examine build results and environment
      run: |
        # Check for available disk space
        echo $'\n===== AVAILABLE DISK SPACE ====='
        df -h
        
        # Check work directory
        echo $'\n===== WORK DIRECTORY CONTENTS ====='
        ls -la work/ || echo "No work directory found"
        if [ -d "work/"*"/" ]; then
          echo $'\n===== CONTENTS OF WORK SUBDIRECTORY ====='
          ls -la work/*/ || echo "No subdirectories found"
        fi
        
        # Extensive search for image files
        echo $'\n===== EXTENSIVE SEARCH FOR IMAGE FILES ====='
        find . -type f -name "*.img" -o -name "*.img.zip" -o -name "*.img.xz" -o -name "*.zip" | xargs ls -lah 2>/dev/null || echo "No image files found"
        
        # Check for larger files that might be images without proper extension
        echo $'\n===== SEARCHING FOR LARGE FILES (POSSIBLE IMAGES) ====='
        find ./work -type f -size +10M | xargs ls -lah 2>/dev/null || echo "No large files found"
        
        # Check deploy directory content
        echo $'\n===== DEPLOY DIRECTORY CONTENTS ====='
        find deploy -type f -ls
        
        # Specific check for files in deploy/images
        if [ -d "deploy/images" ]; then
          echo $'\n===== CONTENTS OF DEPLOY/IMAGES ====='
          ls -la deploy/images/
        fi
        
        # Check build logs
        if [ -f "deploy/build.log" ]; then
          echo $'\n===== BUILD LOG ERRORS ====='
          grep -i "error\|failed\|cannot" deploy/build.log | tail -30 || echo "No errors found in build log"
          
          echo $'\n===== LAST 50 LINES OF BUILD LOG ====='
          tail -50 deploy/build.log
        else
          echo $'\n===== NO BUILD LOG FOUND ====='
        fi
        
        # Create a comprehensive build report regardless of success
        echo $'\n===== CREATING BUILD STATUS REPORT ====='
        echo "Build completed at $(date)" > deploy/pi-gen-build-report.txt
        echo "\nPotential image files:" >> deploy/pi-gen-build-report.txt
        find . -type f -name "*.img" -o -name "*.img.zip" -o -name "*.img.xz" -o -name "*.zip" >> deploy/pi-gen-build-report.txt || echo "None found" >> deploy/pi-gen-build-report.txt
        
        # Create empty image file if none found to ensure artifacts are created
        if [ ! -f deploy/images/*.img ] && [ ! -f deploy/images/*.zip ]; then
          echo "No image files found, creating placeholder for debugging" > deploy/build-debugging-info.txt
          cp -v deploy/build.log deploy/build-log-artifact.txt || echo "No build log found"
        fi
        
    - name: Upload image artifacts and logs
      uses: actions/upload-artifact@v4
      with:
        name: raspberry-pi-image
        path: |
          deploy/**/*
          build_wrapper.sh
        retention-days: 7
        if-no-files-found: warn
        
    - name: Upload large work files as separate artifact
      uses: actions/upload-artifact@v4
      with:
        name: raspberry-pi-build-files
        path: |
          work/**/*.img*
          work/**/*.zip
          work/**/*.xz
          work/**/*.gz
          work/**/rootfs*.tar*
        retention-days: 2
        if-no-files-found: ignore
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: pi-image-${{ github.run_number }}
        name: Raspberry Pi Image Build ${{ github.run_number }}
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: false
        files: |
          deploy/*.img*
          deploy/*.zip
          work/*/*.img*
