name: Build Raspberry Pi Image

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3
      
    - name: Configure pi-gen
      run: |
        # Create config file with our desired settings
        echo "IMG_NAME=PiCaptivePortal-$(date +%Y-%m-%d)" > config
        echo "RELEASE=bullseye" >> config
        echo "TARGET_HOSTNAME=picaptive" >> config
        echo "FIRST_USER_NAME=pi" >> config
        echo "FIRST_USER_PASS=raspberry" >> config
        echo "LOCALE_DEFAULT=en_US.UTF-8" >> config
        echo "KEYBOARD_KEYMAP=us" >> config
        echo "KEYBOARD_LAYOUT=\"English (US)\"" >> config
        echo "TIMEZONE_DEFAULT=America/New_York" >> config
        echo "ENABLE_SSH=1" >> config
        echo "STAGE_LIST=\"stage0 stage1 stage2\"" >> config
        
        # Configure stages to build (only up to stage2 for captive portal)
        touch ./stage2/SKIP_IMAGES
        touch ./stage3/SKIP
        touch ./stage4/SKIP
        touch ./stage5/SKIP
        
        # Show the final config
        echo "\nPi-Gen configuration:"
        cat config
        
        # Verify our captive portal stage is in place
        echo "\nCaptive Portal stage content:"
        ls -la stage2/01-captive-portal

    - name: Setup QEMU
      run: |
        # Enable QEMU for cross-arch emulation
        docker run --rm --privileged multiarch/qemu-user-static:latest --reset -p yes
      
    - name: Examine pi-gen setup
      run: |
        # Display critical information about the repository
        echo "Repository structure:"
        ls -la
        echo "\nDockerfile contents:"
        if [ -f Dockerfile ]; then
          cat Dockerfile
        else
          echo "WARNING: No Dockerfile found in repository root!"
          echo "Creating standard pi-gen Dockerfile"
          cat > Dockerfile << 'EOF'
          FROM debian:bullseye
          
          ENV DEBIAN_FRONTEND=noninteractive
          
          RUN apt-get -y update && \
              apt-get -y install --no-install-recommends \
                  git vim parted quilt coreutils qemu-user-static debootstrap zerofree zip dosfstools \
                  bsdtar libcap2-bin grep rsync xz-utils file git curl bc \
                  qemu-utils kpartx
          
          COPY . /pi-gen/
          
          VOLUME [ "/pi-gen/work", "/pi-gen/deploy" ]
          
          WORKDIR /pi-gen
          
          CMD ["bash", "-e", "-o", "pipefail", "-c", "./build.sh; echo 'Build exited with status code $?'"]
          EOF
        fi
    
    - name: Build Docker image for pi-gen
      run: |
        # Build the Docker image to use for building pi-gen
        docker build -t pi-gen-builder .
    
    - name: Build Raspberry Pi image
      run: |
        echo "Starting Raspberry Pi image build process using Docker..."
        
        # Create output directories with appropriate permissions
        mkdir -p deploy work
        chmod -R 777 deploy work
        
        # Copy our captive portal files to ensure they're in the right place
        echo "Verifying captive portal stage exists:"
        ls -la stage2/01-captive-portal
        
        # Create a simple build script to run inside Docker
        cat > build_script.sh << 'EOF'
        #!/bin/bash
        set -xe
        
        # Print environment and system info
        echo "Environment variables:"
        env
        
        # Make build script executable
        chmod +x build.sh
        
        # Run the build script
        ./build.sh -v
        
        # Copy any generated files to deploy directory
        echo "Copying build artifacts to deploy directory"
        mkdir -p /pi-gen/deploy
        find /pi-gen/work -type f -name "*.img" -exec cp -v {} /pi-gen/deploy/ \;
        
        # If no img files, try to find zip files
        if [ ! -f /pi-gen/deploy/*.img ]; then
          find /pi-gen/work -type f -name "*.zip" -exec cp -v {} /pi-gen/deploy/ \;
        fi
        
        # Create a manifest of all files in work directory
        find /pi-gen/work -type f -name "*img*" -o -name "*.zip" | sort > /pi-gen/deploy/build-artifacts.txt
        
        # List final contents of deploy directory
        echo "Contents of deploy directory:"
        ls -la /pi-gen/deploy/
        EOF
        
        chmod +x build_script.sh
        
        # Run the pi-gen build process inside Docker container
        docker run --rm --privileged \
          -v $(pwd):/pi-gen \
          -v $(pwd)/work:/pi-gen/work \
          -v $(pwd)/deploy:/pi-gen/deploy \
          -e CONTINUE=1 \
          -e IMG_NAME="PiCaptivePortal-$(date +%Y-%m-%d)" \
          pi-gen-builder bash /pi-gen/build_script.sh
      
    - name: List build output
      run: |
        echo "Contents of deploy directory:"
        ls -la deploy/
        
    - name: Compress image file
      run: |
        cd deploy
        # Find any image files and compress them
        find . -name "*.img" | while read img; do
          echo "Compressing $img..."
          xz -T0 -v "$img"
        done
        
        # Verify we have compressed files
        if ! ls *.img.xz 1> /dev/null 2>&1; then
          echo "Warning: No compressed image files found. Looking for other artifacts..."
          find . -type f -size +1M | sort -h
          # Don't fail as we might have other artifacts worth preserving
          touch pi-gen-build-result.txt
          echo "Build completed at $(date)" > pi-gen-build-result.txt
        fi
        
    - name: Upload image artifacts
      uses: actions/upload-artifact@v4
      with:
        name: raspberry-pi-image
        path: |
          deploy/*.img.xz
          deploy/*.zip
          deploy/*.txt
        retention-days: 7
        if-no-files-found: warn
        
    - name: Create GitHub Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: pi-image-${{ github.run_number }}
        name: Raspberry Pi Image Build ${{ github.run_number }}
        draft: false
        prerelease: false
        generate_release_notes: true
        fail_on_unmatched_files: false
        files: |
          deploy/*.img.xz
          deploy/*.zip
